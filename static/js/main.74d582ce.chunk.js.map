{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","this","console","log","React","Component","Form","handleChange","event","target","value","setState","submitForm","handleSubmit","state","initialState","type","onChange","App","characters","data","filter","character","i","fetch","then","result","json","element","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RACMA,G,MAAc,WAClB,OACE,+BACE,4BACE,oCACA,uCAKFC,EAAY,SAAAC,GAChB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAMR,OAAO,+BAAQJ,IAEIU,E,iLACT,IAAD,EACoCC,KAAKZ,MAAxCE,EADD,EACCA,cAAeQ,EADhB,EACgBA,gBAGvB,OAFAG,QAAQC,IAAIZ,EAAgB,kCAG1B,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEA,cAAeA,EACfQ,gBAAiBA,S,GAVQK,IAAMC,W,OCxBpBC,E,YAYnB,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAZRkB,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAAtBb,EADc,EACdA,KAAMc,EADQ,EACRA,MACd,EAAKC,SAAL,eACGf,EAAOc,KAQO,EALnBE,WAAa,WACX,EAAKvB,MAAMwB,aAAa,EAAKC,QAM7B,EAAKC,aAAe,CAClBnB,KAAM,GACNC,IAAK,IAEP,EAAKiB,MAAQ,EAAKC,aAND,E,sEAQT,IAAD,EACed,KAAKa,MADpB,EACClB,KADD,EACOC,IACd,OACE,8BACE,uCACA,2BACEmB,KAAK,OACLpB,KAAK,OAELqB,SAAUhB,KAAKM,eAEjB,sCACA,2BACES,KAAK,OACLpB,KAAK,MAELqB,SAAUhB,KAAKM,eAEjB,2BAAOS,KAAK,SAASN,MAAM,SAASZ,QAASG,KAAKW,kB,GAtCxBR,IAAMC,WCEnBa,E,2MACnBJ,MAAQ,CACNK,WAAY,CACV,CACEvB,KAAM,UACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,WAEP,CACED,KAAM,MACNC,IAAK,mBAEP,CACED,KAAM,SACNC,IAAK,cAGTuB,KAAK,I,EAGPrB,gBAAkB,SAAAL,GAAU,IAClByB,EAAe,EAAKL,MAApBK,WACR,EAAKR,SAAS,CACZQ,WAAYA,EAAWE,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM7B,Q,EAInBmB,aAAe,SAAAS,GACb,EAAKX,SAAS,CAACQ,WAAW,GAAD,mBAAM,EAAKL,MAAMK,YAAjB,CAA6BG,O,wEAE9C,IAAD,OAEHE,MADW,kGAENC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACF,EAAKf,SAAS,CACVS,KAAMM,OANf,IAUDA,EADWzB,KAAKa,MAAdM,KACa5B,KAAI,SAACoC,EAAQlC,GAC9B,OAAQ,wBAAIC,IAAKD,GAAQkC,MAE7B,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEtC,cAAeU,KAAKa,MAAMK,WAC1BpB,gBAAiBE,KAAKF,kBAExB,kBAAC,EAAD,CAAMc,aAAcZ,KAAKY,eACzB,4BAAKa,GANP,O,0CAWgB,IAAD,OAEjBF,MADY,kGAEPC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAC,GACF,EAAKf,SAAS,CACVS,KAAMM,W,GAjEWtB,IAAMC,WCQnByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.74d582ce.chunk.js","sourcesContent":["import React from \"react\";\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  );\n};\nconst TableBody = props => {\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    );\n  });\n\n  return <tbody>{rows}</tbody>;\n};\nexport default class Table extends React.Component {\n  render() {\n    const { characterData, removeCharacter } = this.props;\n    console.log(characterData + \"传递的数据\");\n\n    return (\n      <table>\n        <TableHeader />\n        <TableBody\n          characterData={characterData}\n          removeCharacter={removeCharacter}\n        />\n      </table>\n    );\n  }\n}\n","// 表单文件\nimport React from \"react\";\nexport default class Form extends React.Component {\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n  submitForm = () => {\n    this.props.handleSubmit(this.state);\n    // this.setState(this.initialState);\n  };\n  //构造函数\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      name: \"\",\n      job: \"\"\n    };\n    this.state = this.initialState;\n  }\n  render() {\n    const { name, job } = this.state;\n    return (\n      <form>\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n        //   value={name}\n          onChange={this.handleChange}\n        />\n        <label>Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n        //   value={job}\n          onChange={this.handleChange}\n        />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Table from \"./Table\";\nimport Form from \"./Form\";\nexport default class App extends React.Component {\n  state = {\n    characters: [\n      {\n        name: \"Charlie\",\n        job: \"Janitor\"\n      },\n      {\n        name: \"Mac\",\n        job: \"Bouncer\"\n      },\n      {\n        name: \"Dee\",\n        job: \"Aspring actress\"\n      },\n      {\n        name: \"Dennis\",\n        job: \"Bartender\"\n      }\n    ],\n    data:[],\n  };\n  //删除\n  removeCharacter = index => {\n    const { characters } = this.state;\n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      })\n    });\n  };\n  handleSubmit = character => {\n    this.setState({characters: [...this.state.characters, character]});\n}\n  render() {\n       const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*\";\n        fetch(url)\n            .then(result => result.json())\n            .then(result => {\n                this.setState({\n                    data: result\n                })\n            });\n    const { data } = this.state;\n    const result =  data.map((element,index)=>{\n        return (<li key={index}>{element}</li>);\n    });\n    return (\n      <div className=\"App\">\n        <Table\n          characterData={this.state.characters}\n          removeCharacter={this.removeCharacter}\n        />\n        <Form handleSubmit={this.handleSubmit}/>\n        <ul>{result}</ul>;\n      </div>\n    );\n  }\n  //挂载成功\n  componentDidMount(){\n    const url = \"https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*\";\n    fetch(url)\n        .then(result => result.json())\n        .then(result => {\n            this.setState({\n                data: result\n            })\n        });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}